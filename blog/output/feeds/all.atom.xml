<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>habeebq</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2016-05-16T00:00:00+02:00</updated><entry><title>Using Modular Multiplicative Inverse</title><link href="/using-modular-multiplicative-inverse.html" rel="alternate"></link><updated>2016-05-16T00:00:00+02:00</updated><author><name>habeebq</name></author><id>tag:,2016-05-16:using-modular-multiplicative-inverse.html</id><summary type="html">&lt;p&gt;I was looking at an algorithm somebody came up with, and it invovled an inverse modulo function. I had not come across this before so it really grabbed by attention as I tried to understand what it does.&lt;/p&gt;
&lt;p&gt;This page on &lt;a href="https://www.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses"&gt;Khans Academy&lt;/a&gt; seemed like a very useful introduction to the process.&lt;/p&gt;
&lt;p&gt;In, short the multiplicative modular inverse &lt;code&gt;iA&lt;/code&gt; of a number &lt;code&gt;A&lt;/code&gt; for a modulo &lt;code&gt;C&lt;/code&gt; is defined as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(A * iA) mod C = 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes the modular inverse does not exist though, both A and C need to be coprime.&lt;/p&gt;
&lt;p&gt;The interesting thing about the modular inverse is that it returns a value within the range C that will be unique.&lt;/p&gt;
&lt;p&gt;This allows it to be used as a hashing or an obfuscation method that can be implemented fairly cheaply.&lt;/p&gt;</summary></entry><entry><title>Continous Integration for ASIC Design</title><link href="/continous-integration-for-asic-design.html" rel="alternate"></link><updated>2016-04-17T00:00:00+02:00</updated><author><name>habeebq</name></author><id>tag:,2016-04-17:continous-integration-for-asic-design.html</id><summary type="html">&lt;p&gt;Software development these days is taking a lot of advantage of working in a continous flow. There are a lot of buzzwords going around like &lt;em&gt;continuous integration&lt;/em&gt;, &lt;em&gt;continuous deployment&lt;/em&gt;, &lt;em&gt;continuous delivery&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;These terms make a lot of sense for fast moving software designs, but do they make sense for the slow lugged ASIC design process?&lt;/p&gt;
&lt;p&gt;Lets talk a bit about continous integration first.&lt;/p&gt;
&lt;p&gt;Here is what is really recommended for CI and what are the benefits to be reaped off it.&lt;/p&gt;
&lt;p&gt;Good practices are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commit frequently: To a central repository (atleast daily or more if possible)&lt;/li&gt;
&lt;li&gt;Build automatically&lt;/li&gt;
&lt;li&gt;Self-test the Build&lt;/li&gt;
&lt;li&gt;Build fast: Have a lean and fast build time&lt;/li&gt;
&lt;li&gt;Test in a clean environment&lt;/li&gt;
&lt;li&gt;Dont check in broken or untested code&lt;/li&gt;
&lt;li&gt;Version control all test scripts, config files, CI scripts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This allows you to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid large integrations, and trying to sort out the merge clutter&lt;/li&gt;
&lt;li&gt;Build automatically as often as possible, and find failures, instead of spending time manually running tests&lt;/li&gt;
&lt;li&gt;Less tracking to see what went wrong&lt;/li&gt;
&lt;li&gt;Gives you more confidence, as your tools will catch problems&lt;/li&gt;
&lt;li&gt;No more waiting, and more focus on actual coding and designing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now lets talk about how each of these practices apply to an ASIC Design flow.&lt;/p&gt;
&lt;h3&gt;Commit Frequently&lt;/h3&gt;
&lt;p&gt;ASIC Designers tend to be a bit slower when commiting especially if the mainline is building ok, they would think twice before commiting.
When using a software flow, it is easy to use &lt;code&gt;feature flags&lt;/code&gt; and other &lt;code&gt;disable flags&lt;/code&gt; to make sure the code does not run.
In hardware however, since all the processes are concurrent, they are all running at the same time. Whilst it may be possible to gate
some features with configuration constants, it is certainly be harder than software. There are more things to worry about
like signal or interface connections, and vector/array size mismatches. This is why it requires more validation before the code can be checked in.&lt;/p&gt;
&lt;p&gt;There are methodologies that can be used however so this doesnt remain a problem anymore.
If two features are being developed simultaneously or even one feature is being developed, it best to do it in a separate
branch where you can enable it, without disrupting the mainline but also make check-ins to the mainline to make sure it integrates
but the feature remains disabled.&lt;/p&gt;
&lt;p&gt;A lot of times (in VHDL) we would use configuration constants and generics to remove instances completely, or gate processes/registers/signals.&lt;/p&gt;
&lt;p&gt;Many of the tools behave differently (by virtue of purpose), and for e.g. synthesis tools would optimize the hardware away if they are gated off,
this means they are not tested at all. For this reason we want a separate branch where we can enable the features and thus actually run
the hardware through the tools to see any problems.&lt;/p&gt;
&lt;h3&gt;Build automatically&lt;/h3&gt;
&lt;p&gt;ASIC designers do not have sophisticated build tools like Gradle or Ant. Instead our tools are very vendor specific and this causes some issues to
automate the builds in a vendor-agnostic way.&lt;/p&gt;
&lt;p&gt;Also in terms of builds, we want to decide what we would like to automate:
- The level (top-level, block level)
- The tests (self-tests, basic tests, acceptance tests, UVM tests)
- Synthesis tests (check STA, Area)
- Syntax and linting (simulation compile, code linting)&lt;/p&gt;
&lt;p&gt;There can be a lot of things to run at various levels and the policy needs to decide what needs to be included in the build.
Alternatively you can have multiple builds running in parallel making different checks. (or the same build multiprocessing)&lt;/p&gt;
&lt;h3&gt;Self-test the Build&lt;/h3&gt;
&lt;p&gt;Functional testing of the build can be divided in a number of ways. In ASIC design we usually have module level testbenches,
which we can run faster than system level tests.&lt;/p&gt;
&lt;p&gt;One strategy could be to kick of all module level and top level tests in parallel, and see which fails first.&lt;/p&gt;
&lt;p&gt;Running tests at top level can be however quite slow, and you may need to decide on the frequency at which you run them. For e.g.
maybe run the shorter tests (designed to cover more features) on every check-in but run longer tests once every few hours.&lt;/p&gt;
&lt;h3&gt;Build Fast&lt;/h3&gt;
&lt;p&gt;This can be one of the major bottlenecks in using CI effectively in ASIC design. The build turnaround time is just too high for it
to detect a failure fast enough, and let the team know so they can fix it before commiting any more new code.&lt;/p&gt;
&lt;p&gt;Simply &lt;code&gt;compiling-for-simulation&lt;/code&gt; can take anywhere between 5 minutes to an hour on larger projects. How could you test such a large system.
And while its possible to break certain operations into smaller parts, sometimes your integration builds just require a top-down operation for e.g.
you may want to run system level synthesis in one go (as opposed to breaking it down into smaller libraries).&lt;/p&gt;
&lt;p&gt;There are a number of things we can do to alleviate it, but we have to accept that some kinds of builds are just impossible to run within a reasonable
timeframe.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Break down testing into module level tests&lt;/li&gt;
&lt;li&gt;Run as much as you can in parallel&lt;/li&gt;
&lt;li&gt;Write better tests to ensure 90% of the integration/features is covered with a smaller testset&lt;/li&gt;
&lt;li&gt;Reduce file i/o (reduce logging, use buffered output)&lt;/li&gt;
&lt;li&gt;Turn off debug features, or high effort on the tools&lt;/li&gt;
&lt;li&gt;Focus on bottlenecks, find out what is taking the longest&lt;/li&gt;
&lt;li&gt;Break down the builds into smaller builds (for e.g. each running a different tool). Some CI tools allow you to build a pipeline this way.&lt;/li&gt;
&lt;li&gt;Run on more powerful machines, faster storage&lt;/li&gt;
&lt;li&gt;Fail fast, fail as soon as something is wrong instead of running all the way through&lt;/li&gt;
&lt;li&gt;Tune the workspace, dont check-out files that your build does not require, maybe keep static files or tests somewhere&lt;/li&gt;
&lt;li&gt;Use the fastest tools that give you the result you need (for e.g. does VCS run faster on your code or INCISIVE?)&lt;/li&gt;
&lt;li&gt;Tuning the tools settings to minimize access scope can improve runtime speed (for e.g. if you do not need to look at signals)&lt;/li&gt;
&lt;li&gt;Profile the RTL code, occasionally we have seen unneeded file handles open, or processes running too many times generating delta cycles&lt;/li&gt;
&lt;li&gt;Turn off unnecessary file i/o from RTL tests like ensuring waves are not on, or only writing CRCs to file instead of full data transactions&lt;/li&gt;
&lt;li&gt;Synthesize in blocks in a bottom-up approach allows you to fail fast&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Test in a clean environment&lt;/h3&gt;
&lt;p&gt;It is important to test the build in a clean workspace in case there are remnants of the previous build that cause issues.
Having a dedicated VCS build server is useful, in order to handle the load of builds, and not slow down interactive VCS people are using.&lt;/p&gt;
&lt;h3&gt;Dont check in broken or untested code&lt;/h3&gt;
&lt;p&gt;This should be avoided, otherwise your builds will simply be wasting CPU cycles. It is not expected that all the tests are run (that is the job of 
CI), but some basic testing should have been done, so that the builds can go on.&lt;/p&gt;
&lt;h3&gt;Version control all test scripts, config files, CI scripts&lt;/h3&gt;
&lt;p&gt;This is something I like to do. Make sure all the scripts are self-contained in the version control system. Some CI tools dont easily support version controlling
their job configs, but I think that should be the way forward. I also prefer to decouple the test scripts from the CI tool, and try to keep it agnostic
so they can be ported to another tool (or another instance) if required. Having the job configs in VCS is also very useful to know why a job failed due
to a config change (and what the person was trying to do when he changed it). Track everything.&lt;/p&gt;</summary></entry><entry><title>Writing a 2x2 Matrix Multiplier in VHDL</title><link href="/writing-a-2x2-matrix-multiplier-in-vhdl.html" rel="alternate"></link><updated>2016-03-13T00:00:00+01:00</updated><author><name>habeebq</name></author><id>tag:,2016-03-13:writing-a-2x2-matrix-multiplier-in-vhdl.html</id><summary type="html">&lt;p&gt;There probably isnt a lot to write about in a simple 2x2 matrix multiplier, but I thougt I'd like to post something basic and then explore its various aspects like verification and coding style etc.&lt;/p&gt;
&lt;p&gt;In this post (which I am writing in markdown), I am not going to go to the effort of writing matrix notation so I will try to describe what I can in basic text form.&lt;/p&gt;
&lt;p&gt;A simple 2x2 matrix contains just 4 elements in the form of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;a(i,j) | where i=0,1 and j=0,1
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Data structure&lt;/h3&gt;
&lt;p&gt;In order to represent this in VHDL we need to create a data structure.&lt;/p&gt;
&lt;p&gt;The usual way I prefer to do this is in two steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t_1d_array&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="k"&gt;downto&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t_2d_array&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;t_1d_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The alternative is to declare a 2D array directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t2_2d_array&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="k"&gt;downto&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There isnt a real difference between declaring the arrays either way.
In terms of hardware synthesized there &lt;em&gt;could&lt;/em&gt; be a difference(timing, prioritized paths), depending on how you access or assign the arrays (row-wise or column-wise operations).
However for a matrix multiplier where each element is assigned/accessed in the same way, it makes no difference.
It is an abstract distinction, especially when declaring look-up-tables, how you partition your arrays.&lt;/p&gt;
&lt;p&gt;The slight difference in accessing the elements of the array will be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;signal&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t_2d_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;while for the second declaration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;signal&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t2_2d_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets define our entity and ports. We need two input matrices of type &lt;code&gt;t_2d_array&lt;/code&gt; and one output matrix also of &lt;code&gt;t_2d_array&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;entity&lt;/span&gt; &lt;span class="nc"&gt;mult_2x2&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
    &lt;span class="k"&gt;port&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;in_matrix1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;span class="n"&gt;t_2d_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;in_matrix2&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;span class="n"&gt;t_2d_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;out_matrix&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;t_2d_array&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nc"&gt;mult_2x2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets define the matrix operation.
A matrix multiplication is a simple row-to-column wise multiplication and addition
i.e the row elements of the first matrix are multiplied the the column elements of the second matrix, and added up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;c(i) = sum[ a(x) * b(y) ] where x=0 to i, y=0 to j
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In VHDL we can write each individual element as,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;out_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                       &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                       &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="n"&gt;out_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                       &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                       &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="n"&gt;out_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                       &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                       &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="n"&gt;out_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                       &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                       &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now there are a couple of things to consider in the above lines of code.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can see an insane amount of typecasting going on here. This is the result of VHDL's strongly type nature.
VHDL forces you to define the nature of numbers before performing an operation on them.
Since we chose to store them as &lt;code&gt;std_logic_vector&lt;/code&gt;, we now need to cast them as &lt;code&gt;signed&lt;/code&gt; before every operation, and then cast them
back to &lt;code&gt;std_logic_vector&lt;/code&gt; before assigning them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bitwidths. Usually most hardware is done as fixed-point arithment unless floating point is absolutely needed.
In our case we defined each element of the matrix as an 8-bit (signed) number. Multiplying two 8-bit numbers results in a
16-bit result, and a further addition means due to the carry bit, the result of each index is now 17-bits.
However, we insist on storing this into a 8-bit vector again!
How is this possible? It is not, without a loss of either precision or range.
Imagine our two inputs to be an 8-bit number but the decimal point at the 4-bit mark i.e. a 4-bit number with 4 fractional bits.
In this case our result of 8-bit can be considered a full 8-bit number but with zero fractional bits.
However, if we consider our initial inputs to be full 8-bit integers then, to store our final result into 8-bits means we
need to either truncate it, or quantize it by dropping the lower or upper bits respectively.
As this is a theoretical exercise, we wont worry about it too much, but the representation of numbers is quite important in general.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But this is pretty basic VHDL, can we further compact it using loops?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;
        &lt;span class="n"&gt;out_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                     &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                                     &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
     &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That looks quite a bit compacted! Less chances for typos and errors, once you get it right.
The hardware synthesis tool will unroll it into the initial version though in order to try and optimize it.&lt;/p&gt;
&lt;p&gt;Here is the full code for the multiplier.&lt;/p&gt;
&lt;h3&gt;Entity and Architecture&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- ---------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;-- Name: mult_2x2&lt;/span&gt;
&lt;span class="c1"&gt;-- Purpose: This is a matrix multiplier for 2 2x2 arrays of 8-bit signed numbers&lt;/span&gt;
&lt;span class="c1"&gt;-- ---------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="k"&gt;library&lt;/span&gt; &lt;span class="nn"&gt;ieee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ieee.std_logic_1164.all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ieee.numeric_std.all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;library&lt;/span&gt; &lt;span class="nn"&gt;work&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;work.mult_2x2_pack.all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;entity&lt;/span&gt; &lt;span class="nc"&gt;mult_2x2&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
    &lt;span class="k"&gt;port&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;in_matrix1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;span class="n"&gt;t_2d_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;in_matrix2&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;span class="n"&gt;t_2d_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;out_matrix&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;t_2d_array&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nc"&gt;mult_2x2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;architecture&lt;/span&gt; &lt;span class="nc"&gt;rtl&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nc"&gt;mult_2x2&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;

&lt;span class="k"&gt;begin&lt;/span&gt;

   &lt;span class="k"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;begin&lt;/span&gt;
       &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;
           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;
               &lt;span class="n"&gt;out_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                                   &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                                                   &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_matrix2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
           &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nc"&gt;rtl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Package&lt;/h3&gt;
&lt;p&gt;And here is the code for the &lt;code&gt;mult_2x2_pack.vhd&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- ---------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;-- Name: mult_2x2_pack&lt;/span&gt;
&lt;span class="c1"&gt;-- Purpose: Package contains data structures used to hold a 2x2 matrix&lt;/span&gt;
&lt;span class="c1"&gt;-- ---------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;library&lt;/span&gt; &lt;span class="nn"&gt;ieee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ieee.std_logic_1164.all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ieee.numeric_std.all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;mult_2x2_pack&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;

   &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t_1d_array&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="k"&gt;downto&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t_2d_array&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;t_1d_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;  &lt;span class="nc"&gt;mult_2x2_pack&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Testbench&lt;/h3&gt;
&lt;p&gt;Further more, here is a very rudimentary testbench:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- ---------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;-- Name: mult_2x2_tb&lt;/span&gt;
&lt;span class="c1"&gt;-- Purpose: Testbench for a 2x2 combinatorial matrix multiplier&lt;/span&gt;
&lt;span class="c1"&gt;-- ---------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;library&lt;/span&gt; &lt;span class="nn"&gt;ieee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ieee.std_logic_1164.all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ieee.numeric_std.all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;library&lt;/span&gt; &lt;span class="nn"&gt;work&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;work.mult_2x2_pack.all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;entity&lt;/span&gt; &lt;span class="nc"&gt;mult_2x2_tb&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nc"&gt;mult_2x2_tb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;architecture&lt;/span&gt; &lt;span class="nc"&gt;tb&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nc"&gt;mult_2x2_tb&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;

   &lt;span class="k"&gt;signal&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t_2d_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;signal&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t_2d_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;begin&lt;/span&gt;

   &lt;span class="k"&gt;process&lt;/span&gt;
   &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="k"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))));&lt;/span&gt;
      &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))));&lt;/span&gt;
      &lt;span class="k"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="s"&gt;"end of test vectors"&lt;/span&gt; &lt;span class="k"&gt;severity&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nc"&gt;tb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>A tale of storage benchmarks</title><link href="/a-tale-of-storage-benchmarks.html" rel="alternate"></link><updated>2015-12-31T00:00:00+01:00</updated><author><name>habeebq</name></author><id>tag:,2015-12-31:a-tale-of-storage-benchmarks.html</id><summary type="html">&lt;p&gt;When I received a new SSD I decided to benchmark all of my drives before I connected it to see how it would far and whether anything would change.&lt;/p&gt;
&lt;p&gt;I built my PC a number of years ago, based on Sandy Bridge and it has served me pretty well so far. The motherboard is a Gigabyte H67-M-UD2H-B3 which has 2 SATA3 ports and 4 SATA2 ports. The processor is a humble Core i3-2100 chugging along its 65W of coolness. Its not a high profile build but its a very smooth and balanced one.&lt;/p&gt;
&lt;p&gt;So the drives that I have are:&lt;/p&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Drive&lt;/th&gt;
&lt;th&gt;Capactity&lt;/th&gt;
&lt;th&gt;Connection&lt;/th&gt;
&lt;th&gt;Other&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Samsung EVO 840&lt;/td&gt;
&lt;td&gt;120GB&lt;/td&gt;
&lt;td&gt;SATA-3&lt;/td&gt;
&lt;td&gt;FW:&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Samsung Spinpoint F3&lt;/td&gt;
&lt;td&gt;500GB&lt;/td&gt;
&lt;td&gt;SATA-3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Seagate ST350041&lt;/td&gt;
&lt;td&gt;500GB&lt;/td&gt;
&lt;td&gt;SATA-2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sandisk SSD Plus&lt;/td&gt;
&lt;td&gt;240 GB&lt;/td&gt;
&lt;td&gt;SATA-2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;Few notes before you read through&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;I dont really believe benchmarks are a good indicator for general every performance. However, they can be a good indicator that something has gone wrong, if the benchmarks change after a configuration change. This was the reason I was benchmarking to see if adding an additional drive would change the scores. Spoiler alert: they didnt.&lt;/li&gt;
&lt;li&gt;A note on the Samsung EVO 840 drive. I bought this last christmas to boost the performance of the system. While I did see better boot times, i didnt see enough boost in everyday usage, and later I realized while this drive will do great benchmarks I dont think it really performs as spectacularly as I expected. In fact I now feel the slower Sandisk SSD Plus performs better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Programs Used to benchmark&lt;/h1&gt;
&lt;p&gt;I used &lt;a href="http://www.majorgeeks.com/files/details/hdtach.html"&gt;HDTach&lt;/a&gt; in the past, however I couldnt export the results very cleanly.&lt;/p&gt;
&lt;p&gt;So I found two other reliable programs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://crystalmark.info/software/CrystalDiskMark/index-e.html"&gt;CrystalDiskMark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hdtune.com/download.html"&gt;HDTune Free edition&lt;/a&gt; There is a free version on their dowloads page, keep your eye peeled&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The first bench&lt;/h2&gt;
&lt;p&gt;This where I realized the EVO 840 was crapping out, so I had to re-optimized the drive and run the benchmarks again.
In the following benchmarks you can see the average transfer speed going from 300 Mbps to 390 Mbps, but in real world performance it is much worse. Still better than a mechanical drive though.
However, the minimum transfer rate dropped to 1 Mbps, not sure what the implications of that are.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;HD Tune: Samsung SSD 840 EVO 120G Benchmark
Transfer Rate Minimum : 1.0 MB/sec
Transfer Rate Maximum : 449.1 MB/sec
Transfer Rate Average : 308.1 MB/sec
Access Time           : 0.4 ms
Burst Rate            : 196.7 MB/sec
CPU Usage             : 27.2%

CrystalDiskMark 5.1.0 x64 (C) 2007-2015 hiyohiyo
Sequential Read (Q= 32,T= 1)   :   554.872 MB/s
Sequential Write (Q= 32,T= 1)  :   500.100 MB/s
Random Read 4KiB (Q= 32,T= 1)  :   281.610 MB/s [ 68752.4 IOPS]
Random Write 4KiB (Q= 32,T= 1) :   237.549 MB/s [ 57995.4 IOPS]
Sequential Read (T= 1)         :   532.327 MB/s
Sequential Write (T= 1)        :   486.142 MB/s
Random Read 4KiB (Q= 1,T= 1)   :    39.854 MB/s [  9730.0 IOPS]
Random Write 4KiB (Q= 1,T= 1)  :   106.855 MB/s [ 26087.6 IOPS]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Benchmarking the other drives&lt;/h2&gt;
&lt;p&gt;The only interesting thing here I see is that the CPU load is much  higher when benching mechanical drives.&lt;/p&gt;
&lt;p&gt;Well thats not the only interesting thing...&lt;/p&gt;
&lt;p&gt;Also the Samsung Spinpoint F3 seems to be quite good as a consumer level mechanical drive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;HD Tune: SAMSUNG HD502HJ Benchmark
Transfer Rate Minimum : 72.0 MB/sec
Transfer Rate Maximum : 136.4 MB/sec
Transfer Rate Average : 113.4 MB/sec
Access Time           : 13.6 ms
Burst Rate            : 176.3 MB/sec
CPU Usage             : 26.4%

CrystalDiskMark 5.1.0 x64 
Sequential Read (Q= 32,T= 1)   :   123.125 MB/s
Sequential Write (Q= 32,T= 1)  :   120.259 MB/s
Random Read 4KiB (Q= 32,T= 1)  :     0.844 MB/s [   206.1 IOPS]
Random Write 4KiB (Q= 32,T= 1) :     1.000 MB/s [   244.1 IOPS]
Sequential Read (T= 1)         :   121.431 MB/s
Sequential Write (T= 1)        :    99.610 MB/s
Random Read 4KiB (Q= 1,T= 1)   :     0.433 MB/s [   105.7 IOPS]
Random Write 4KiB (Q= 1,T= 1)  :     0.882 MB/s [   215.3 IOPS]

HD Tune: ST350041ST3500418AS Benchmark
Transfer Rate Minimum : 66.0 MB/sec
Transfer Rate Maximum : 123.7 MB/sec
Transfer Rate Average : 100.0 MB/sec
Access Time           : 14.2 ms
Burst Rate            : 134.9 MB/sec
CPU Usage             : 26.4%

CrystalDiskMark 5.1.0 x64 (C) 2007-2015 hiyohiyo
Sequential Read (Q= 32,T= 1)   :   125.418 MB/s
Sequential Write (Q= 32,T= 1)  :   105.855 MB/s
Random Read 4KiB (Q= 32,T= 1)  :     1.874 MB/s [   457.5 IOPS]
Random Write 4KiB (Q= 32,T= 1) :     0.613 MB/s [   149.7 IOPS]
Sequential Read (T= 1)         :   125.202 MB/s
Sequential Write (T= 1)        :   122.893 MB/s
Random Read 4KiB (Q= 1,T= 1)   :     0.681 MB/s [   166.3 IOPS]
Random Write 4KiB (Q= 1,T= 1)  :     0.623 MB/s [   152.1 IOPS]

HD Tune: SanDisk SDSSDA240G Benchmark
Transfer Rate Minimum : 180.2 MB/sec
Transfer Rate Maximum : 235.4 MB/sec
Transfer Rate Average : 223.6 MB/sec
Access Time           : 0.0 ms
Burst Rate            : 72.8 MB/sec
CPU Usage             : 1.5%

CrystalDiskMark 5.1.0 x64 (C) 2007-2015 hiyohiyo
Sequential Read (Q= 32,T= 1)   :   285.102 MB/s
Sequential Write (Q= 32,T= 1)  :   223.626 MB/s
Random Read 4KiB (Q= 32,T= 1)  :   159.216 MB/s [ 38871.1 IOPS]
Random Write 4KiB (Q= 32,T= 1) :   193.717 MB/s [ 47294.2 IOPS]
Sequential Read (T= 1)         :   276.234 MB/s
Sequential Write (T= 1)        :   205.731 MB/s
Random Read 4KiB (Q= 1,T= 1)   :    22.391 MB/s [  5466.6 IOPS]
Random Write 4KiB (Q= 1,T= 1)  :    62.000 MB/s [ 15136.7 IOPS]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Running both SSD drives together&lt;/h3&gt;
&lt;p&gt;I tried to see how benchmarking two SSDs together would affect the speed, and the SATA controller handles them nicely and there are no conflicts, both can reach their peak speeds.&lt;/p&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metric&lt;/th&gt;
&lt;th&gt;SanDisk SDSSDA240G&lt;/th&gt;
&lt;th&gt;Samsung 840 EVO 120G&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Transfer Rate Minimum&lt;/td&gt;
&lt;td&gt;194.8 MB/sec&lt;/td&gt;
&lt;td&gt;389.2 MB/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Transfer Rate Maximum&lt;/td&gt;
&lt;td&gt;233.9 MB/sec&lt;/td&gt;
&lt;td&gt;402.9 MB/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Transfer Rate Average&lt;/td&gt;
&lt;td&gt;232.8 MB/sec&lt;/td&gt;
&lt;td&gt;397.1 MB/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Access Time&lt;/td&gt;
&lt;td&gt;0.0 ms&lt;/td&gt;
&lt;td&gt;0.1 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Burst Rate&lt;/td&gt;
&lt;td&gt;86.2 MB/sec&lt;/td&gt;
&lt;td&gt;163.3 MB/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU Usage&lt;/td&gt;
&lt;td&gt;2.8%&lt;/td&gt;
&lt;td&gt;2.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Running all 4 drives!&lt;/h3&gt;
&lt;p&gt;I ran HD Tune on all drives simultaneously to see if they could possibly saturate the SATA bus and there was a bottleneck somewhere in the controller.
But they ran well :)&lt;/p&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metric&lt;/th&gt;
&lt;th&gt;SanDisk SDSSDA240G&lt;/th&gt;
&lt;th&gt;Samsung SSD 840 EVO 120G&lt;/th&gt;
&lt;th&gt;SAMSUNG HD502HJ&lt;/th&gt;
&lt;th&gt;ST350041ST3500418AS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Transfer Rate Minimum&lt;/td&gt;
&lt;td&gt;203.1 MB/sec&lt;/td&gt;
&lt;td&gt;381.5 MB/sec&lt;/td&gt;
&lt;td&gt;72.0 MB/sec&lt;/td&gt;
&lt;td&gt;66.0 MB/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Transfer Rate Maximum&lt;/td&gt;
&lt;td&gt;235.7 MB/sec&lt;/td&gt;
&lt;td&gt;401.3 MB/sec&lt;/td&gt;
&lt;td&gt;136.4 MB/sec&lt;/td&gt;
&lt;td&gt;123.7 MB/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Transfer Rate Average&lt;/td&gt;
&lt;td&gt;229.6 MB/sec&lt;/td&gt;
&lt;td&gt;390.0 MB/sec&lt;/td&gt;
&lt;td&gt;113.5 MB/sec&lt;/td&gt;
&lt;td&gt;100.0 MB/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Access Time&lt;/td&gt;
&lt;td&gt;0.0 ms&lt;/td&gt;
&lt;td&gt;0.1 ms&lt;/td&gt;
&lt;td&gt;13.7 ms&lt;/td&gt;
&lt;td&gt;14.3 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Burst Rate&lt;/td&gt;
&lt;td&gt;85.9 MB/sec&lt;/td&gt;
&lt;td&gt;162.9 MB/sec&lt;/td&gt;
&lt;td&gt;162.4 MB/sec&lt;/td&gt;
&lt;td&gt;130.7 MB/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU Usage&lt;/td&gt;
&lt;td&gt;4.0%&lt;/td&gt;
&lt;td&gt;4.0%&lt;/td&gt;
&lt;td&gt;3.9%&lt;/td&gt;
&lt;td&gt;3.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary></entry><entry><title>A week with an iPhone</title><link href="/a-week-with-an-iphone.html" rel="alternate"></link><updated>2015-11-16T00:00:00+01:00</updated><author><name>habeebq</name></author><id>tag:,2015-11-16:a-week-with-an-iphone.html</id><summary type="html">&lt;p&gt;I thought I'd jot down some notes as I go through this journey with the iphone.&lt;/p&gt;
&lt;p&gt;The overall experience is good mainly as the battery life is pretty good. Car navigation journeys that would have caused my
android phones to overhead and battery go down from 100 to 30, only causes the iPhone 5 to go down to 70. Immediately this helps
me as I am not always worried about getting the phone to a charge port immediately. Its a solid performer, reliable and does what it does.&lt;/p&gt;
&lt;p&gt;There are some differences however in usablility.&lt;/p&gt;
&lt;h3&gt;Touch&lt;/h3&gt;
&lt;p&gt;Touches seem to need to register a bit lower than what you are trying to hit i.e. it seems that sometimes the hitbox is lower than
the actual text or icon. I'm not at all used to the keyboard at all and constantly making mistakes and hitting backspace instead of enter too much.&lt;/p&gt;
&lt;h3&gt;Gestures&lt;/h3&gt;
&lt;p&gt;There is no gesture discoverability and im sure most users dont even know about it. For e.g. hitting the top status bar scrolls all
the way to the top, this is important for pull-to-refresh based feeds.
Also, im not even sure what swiping does yet. Sometimes it works to go back, sometimes it doesnt. I'm not sure if its a universal gesture or not.
The 'Tips' app doesnt help here either, i went through the whole thing withuot learning about gestures. No onboarding at all.&lt;/p&gt;
&lt;h3&gt;Icons&lt;/h3&gt;
&lt;p&gt;Apples own built-in app icons look too dated. They have annoying gradients on the backgrounds, and are a bit complex.
In comparison Google's icons on iOS look great, they are flat and clean.&lt;/p&gt;
&lt;h3&gt;Appstore discoverability&lt;/h3&gt;
&lt;p&gt;I'm not quite sure whether this is better or worse than the Play Store yet. I'm trying to discover apps in featured or top lists, it is very similar
to the Play Store, except that the "Similar Apps" or "Other user installed" sections contain less apps.&lt;/p&gt;
&lt;p&gt;Also I havent seen the Appstore recommending me any apps yet, possibly i need to really dig more.&lt;/p&gt;
&lt;h3&gt;Appstore selection&lt;/h3&gt;
&lt;p&gt;The Play Store has probably grown much bigger than the Appstore, but its hard to tell. On Android there are a massive amount of homebrew and independent
developers, and a huge selection of upcoming material design apps. I am not sure the same is true for the Appstore. The Appstore seems to be more dominated
by games so far from what I can see.&lt;/p&gt;
&lt;h3&gt;App Prices&lt;/h3&gt;
&lt;p&gt;The apps on the iOS Appstore are definitely more expensive than on Android. On the Play Store you rarely ever see apps costing mor than $10 and the
majority is i the $2 region. On the Appstore its more in the $4 region and there are many apps charging over $10. It seems they get along okay.&lt;/p&gt;
&lt;h3&gt;App Review views&lt;/h3&gt;
&lt;p&gt;In the beginning I was quite surprised to see such less reviews on certain apps until I realized it only displays the reviews for the current version.
It is possible to select "All versions" in order to see the total reviews for the app.&lt;/p&gt;</summary></entry><entry><title>Moving to the Dark side</title><link href="/moving-to-the-dark-side.html" rel="alternate"></link><updated>2015-11-06T00:00:00+01:00</updated><author><name>habeebq</name></author><id>tag:,2015-11-06:moving-to-the-dark-side.html</id><summary type="html">&lt;p&gt;Most people who know me I personally prefer Android, although I've never forced my opinion on someone else as I believe people have different use cases and requirements depending on how they use their phones.&lt;/p&gt;
&lt;p&gt;So I've finally decided to use an iOS device as my daily driver for atleast a year and see how it goes. It wasnt an easy decision to make, but hey...lets keep an open mind.&lt;/p&gt;
&lt;h3&gt;Devices I base my opinion on&lt;/h3&gt;
&lt;p&gt;So far, I've had a Galaxy S, Galaxy S3 and a MotoG as my daily drivers.
I have used an iPhone5 occasionally.
Obviously I follow the tech scene, so I read reviews etc...but with a grain of salt.&lt;/p&gt;
&lt;h3&gt;What draws me to an Apple device&lt;/h3&gt;
&lt;p&gt;Engineering done well. I feel that Apple devices are well engineered. All the way from the SoC, to the physical product, and extending to the platform. People say its been lagging behind Android, but well, both of these operating systems have been lagging behind each other, and see-sawing which one gets ahead on features etc. The fact is, the more both platforms copy each other, the more features and options become available to the end user. It pushes both teams to innovate and critically think about their engineering and usability decisions.&lt;/p&gt;
&lt;p&gt;However what I like is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Lightning connector. This is how any connector should be, sturdy and unbreakable. MicroUSB was flimsy.&lt;/li&gt;
&lt;li&gt;Battery charge time. In my experience Android devices charge far far slower than iOS devices&lt;/li&gt;
&lt;li&gt;Battery life. No comparison really. Especially on standby.&lt;/li&gt;
&lt;li&gt;Performance. No lag, no stutter. It just delivers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I am concerned I wont like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lack of customization&lt;/li&gt;
&lt;li&gt;Usually there is only a single way of doing things&lt;/li&gt;
&lt;li&gt;Settings are hidden in weird places for eg battery percentage&lt;/li&gt;
&lt;li&gt;Design feels a bit dated compared to material&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Recovering a phone with a broken screen</title><link href="/recovering-a-phone-with-a-broken-screen.html" rel="alternate"></link><updated>2015-10-25T00:00:00+02:00</updated><author><name>habeebq</name></author><id>tag:,2015-10-25:recovering-a-phone-with-a-broken-screen.html</id><summary type="html">&lt;p&gt;I broke the screen of my two-and-a-half year old Galaxy S3. Frustrated by the battery life, and the finicky microusb port, that just wouldnt charge the dying phone, I flung it across the room. I was a bit disappointed to break the screen in a single attempt, I was hoping I would get to bash it a bit more, but while the screen broke completely, the rest of the phone remained alive. It can still charge (oh, the irony) and turn on.&lt;/p&gt;
&lt;p&gt;In the moment later, I started to think what useful data can I get from the phone. While its easy enough to copy photos from the phone, and my contacts are all backed up to google, the only other thing I could think of was my FuelIO logs (mileage and fillup reports).&lt;/p&gt;
&lt;p&gt;Android 4.0 and later, come with some extra adb commands (backup and restore), that will let you backup and restore a particular apps data, or even the full system.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb&lt;/code&gt; is the &lt;code&gt;Android Debug Bridge&lt;/code&gt;, which is a command-line platform tool provided by google. It is run on the development host i.e. a windows/linux/mac machine, to which the android device is tethered, and you can send commands interactively to the device with this tool. I have used this in the past, and I remembered I was able to navigate the full file system of the phone, however it seems that in later versions there is more security and I cannot access system or data partitions anymore. So I really wondered how am I going to get the app's internal data without full root access to the file system.&lt;/p&gt;
&lt;p&gt;A bit of googling, and while I couldnt get full access, I figured out how to get a particular apps data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;adb backup -f &amp;lt;filename.ab&amp;gt; &amp;lt;packagename&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where the &lt;code&gt;.ab&lt;/code&gt; file is an android backup file (just a glorified tar file). You can get the apps package name from the play store, just search for it, and in the url you will see the package name in the id parameter, something like id=com.kajda.fuelio. So this becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;adb backup -f fuelio-data.ab com.kajda.fuelio
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It does mention that it will display a prompt on the screen where you can enter an encryption password, but luckily for me it didnt and it just went through. I'm not sure if it is because I had USB Debugging enabled by default. Once you have the backup file, plug in your other phone, install the app, and restore it by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;adb restore fuelio-data.ab
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here it will prompt you on the phone if you do want to restore. Now when you open the app, you should see all the new data there.&lt;/p&gt;
&lt;p&gt;In the meantime just-in-case, I'd do a full backup of the phone to make sure I have anything I might need later.&lt;/p&gt;
&lt;p&gt;What if you want to check whether the backup does contain any files or not? Well, we need to convert the &lt;code&gt;ab&lt;/code&gt; file into a &lt;code&gt;tar&lt;/code&gt; file. There may be other methods, but I used this particular tool &lt;code&gt;abe&lt;/code&gt; aka &lt;code&gt;android-backup-extractor&lt;/code&gt;. After that even 7-zip can read &lt;code&gt;tar&lt;/code&gt; files so you should be able to verify the contents.&lt;/p&gt;
&lt;p&gt;For reference here are some useful links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://forum.xda-developers.com/google-nexus-5/general/guide-backup-data-root-t2824790"&gt;Guide to adb backup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://android.stackexchange.com/questions/28481/how-do-you-extract-an-apps-data-from-a-full-backup-made-through-adb-backup"&gt;Information on the Android backup format and tools to backup/restore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.xda-developers.com/showthread.php?t=2011811"&gt;GUIDE on How to extract, create or edit android adb backups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.less-broken.com/blog/2012/04/transferring-apps-and-data-from-one.html"&gt;Backing up and restoring all app data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another thought, if you are in a predicament like me, you can try to use some screen mirroring software, to see what is going on. I'll try DroidExplorer or something like that later.&lt;/p&gt;</summary></entry><entry><title>Customizing the blog</title><link href="/customizing-the-blog.html" rel="alternate"></link><updated>2015-10-12T00:00:00+02:00</updated><author><name>habeebq</name></author><id>tag:,2015-10-12:customizing-the-blog.html</id><summary type="html">&lt;p&gt;So I'm no front-end developer. In the past I've tried to understand CSS, but it always felt alien to me. However, hearing and reading about it again and again, possibly rubbed it on to me a little bit. Without CSS we cannot alter the looks of the blog very easily, but using an overriding &lt;code&gt;custom.css&lt;/code&gt; file, we can override some of the default values and make it more personalized.&lt;/p&gt;
&lt;p&gt;I started off with the &lt;code&gt;pelican-bootstrap3&lt;/code&gt; theme by &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;DandyDev&lt;/a&gt;. This guy has put in a lot of effort to port the theme properly to &lt;code&gt;Pelican&lt;/code&gt; with some extensions. Its a great theme and offers a lot out of the box, but I really wanted to make it look different. The theme also comes with a lot of pre-minified CSS (just CSS compacted for transport) from Thomas Park's &lt;a href="http://bootswatch.com/"&gt;Bootswatch&lt;/a&gt;. This contained a lot of different and interesting styles for bootstrap.&lt;/p&gt;
&lt;p&gt;Lets start by understanding what bootstrap is. Bootstrap is a front-end framework originating from Twitter, that basically has a library of component customisations. The HTML actually defines these components, and assigns each object a class. The bootstrap css, when loaded then styles all of these components. This framework contains a large number of component customisations like grids and tables etc. The main aim, is to make the website &lt;strong&gt;responsive&lt;/strong&gt;. This means it loads and scales properly on mobile, tablets and desktops etc. If you see a bootstrap based website, it will look good on any screen size, and will act a bit differently on them, for e.g. the menu and navbar acts differently on mobile vs desktop.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bootswatch.com/"&gt;Bootswatch&lt;/a&gt; hosts some nice looking free themes for bootstrap. These mainly change the color schemes etc. Also, fortunately, the &lt;code&gt;pelican-bootstrap3&lt;/code&gt; comes with these themes already built-in! You do not need to add them yourself.&lt;/p&gt;
&lt;p&gt;So lets start off by cloning the bootstrap theme to get a local copy bootstrap theme in Pelican, we can clone the. There are instructions on the &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;repo&lt;/a&gt; github too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/DandyDev/pelican-bootstrap3.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then in your &lt;code&gt;pelicanconf.py&lt;/code&gt; point to this theme, and also point to any bootstrap theme you like from bootswatch (or you can see all the css options in &lt;code&gt;pelican-bootstrap3/static/css/bootstrap.*.min.css&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/home/habeeb/workspace/habeebq.github.io/blog/pelican-bootstrap3'&lt;/span&gt;
&lt;span class="n"&gt;BOOTSTRAP_THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'readable'&lt;/span&gt;
&lt;span class="n"&gt;PYGMENTS_STYLE&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'monokai'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, so now it looks like a normal bootstrap theme with a navbar and sidebar etc.&lt;/p&gt;
&lt;p&gt;Lets start with easy stuff.&lt;/p&gt;
&lt;p&gt;I turned the sidebar off and removed categories from the Navbar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#Navbar&lt;/span&gt;
&lt;span class="n"&gt;DISPLAY_CATEGORIES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="c"&gt;#SIDEBAR&lt;/span&gt;
&lt;span class="n"&gt;HIDE_SIDEBAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Added some more information to the Article header (the section underneath the article title):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Article Header&lt;/span&gt;
&lt;span class="n"&gt;SHOW_ARTICLE_AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;SHOW_ARTICLE_CATEGORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;SHOW_DATE_MODIFIED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the tables werent showing properly I had to install a bootstrap plugin called &lt;a href="https://github.com/ingwinlu/pelican-bootstrapify"&gt;pelican-bootstrapify&lt;/a&gt;, that cleans up some of bootstraps code. It seems to replace the tags in the table, I am not yet 100% sure what its flow is. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Fixing the tables formatting&lt;/span&gt;
&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'/home/habeeb/workspace/pelican_plugins/pelican-bootstrapify'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bootstrapify'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So that was most of the seemingly easy part, however it wasnt so easy when I was trying to figure it out on google and stackoverflow.&lt;/p&gt;
&lt;p&gt;Now, how to make changes to the font, colors, navbar, icons, linkcolor and jinja template modifications.&lt;/p&gt;
&lt;h4&gt;Customizing the fonts&lt;/h4&gt;
&lt;p&gt;Lets start with the fonts, where we used google fonts to make it easier for us. Now the font needs to be defined in the jinja template for base.html. This is in pelican-bootstrapify3/templates/base.html
In the head section of the template we define the following. We have created a new variable called GOOGLEFONT in &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{% if GOOGLEFONT %}
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ GOOGLEFONT }}"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in the &lt;code&gt;pelicanconf.py&lt;/code&gt; we define the value of GOOGLEFONT as just the location of it. You can find this location on the Google Fonts website. The bootstrap theme we use also supports an overriding custom.css if it is defined, so we also define that here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Bootstrap extra css&lt;/span&gt;
&lt;span class="n"&gt;CUSTOM_CSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'theme/css/custom.css'&lt;/span&gt;
&lt;span class="n"&gt;GOOGLEFONT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://fonts.googleapis.com/css?family=Source+Sans+Pro'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then create a new file in pelican-bootstrap3/static/css/custom.css or wherever you feel like creating it, but make sure the path mentioned above is correct.&lt;/p&gt;
&lt;p&gt;Ok, so we have acheived the inclusion of the font in the html header now, but we havent applied the font anywhere. We will now use the &lt;code&gt;custom.css&lt;/code&gt; file to override bootstrap's defaults. You can apply the font to any tag, in our case, we applied it to the whole body of the html.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Source Sans Pro"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"Open Sans"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="k"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;728571&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we have changed the font to Source Sans Pro, with a couple of fallbacks. We also increased the font size and increase the line-height effectively the distance between lines.&lt;/p&gt;
&lt;h4&gt;Customizing the Navbar style&lt;/h4&gt;
&lt;p&gt;Next I wanted to customize the navbar i.e. the menu bar at the top of the page. Changing the height for that was easy (again in &lt;code&gt;custom.css&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.navbar-brand&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.navbar-nav&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, changing the colors of the Navbar was much harder, and I had to use an online tool to generate the CSS for that. See this &lt;a href="http://bootstrap3-menu.codedorigin.com/#sthash.RdlMZNJ4.mNUqqyEa.dpbs"&gt;link&lt;/a&gt; and paste the generated css in your &lt;code&gt;custom.css&lt;/code&gt; again.&lt;/p&gt;
&lt;h4&gt;Font Awesome Icons in the Navbar&lt;/h4&gt;
&lt;p&gt;Adding font-awesome icons to the Navbar requires modification of the jinja template, again we go back to our &lt;code&gt;base.html&lt;/code&gt; file. &lt;/p&gt;
&lt;p&gt;We modify the section where MENUITEMS are being iterated over. Add the font awesome icon here (this is possibly not the best way to add the icon in terms of styling/spanning, I need to improve this):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{% for title, link, icon in MENUITEMS %}
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ link }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-{{ icon }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;  {{ title }}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see this requires an extra icon to be described in the navbar menu item section in the &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MENUITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;'projects'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'/projects.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'code-fork'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'whoami'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'/about.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Link colors&lt;/h4&gt;
&lt;p&gt;This next part about changing the link colors is a bit ...hmmm...not the best solution.
The links generated by Pelican seem to all be tagged as 'a' but with no other class name. So the only way to change the link color is to change ALL the link colors sadly. &lt;/p&gt;
&lt;p&gt;Changing the link colors&lt;/p&gt;
&lt;p&gt;So I did something like this in my &lt;code&gt;custom.css&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;/* Code tags to be made purple!*/&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#523AB0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, this also changed my header links etc, which I had to override once again to set them back to black:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.page-header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So well, changing the link color might generate too much work. I havent found a way to add a class into it so i can customize it separately.&lt;/p&gt;
&lt;h4&gt;Customizing the page width&lt;/h4&gt;
&lt;p&gt;Its possible to also control how wide the page body would be. I used the following in my &lt;code&gt;custom.css&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;1000px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;850px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To be honest I really pulled this value out as my monitor is only 1600x1200 and of that my Taskbar is on the left so causing the browser to get less pixels. I hope it doesnt really matter in the big picture!&lt;/p&gt;
&lt;p&gt;So well, there it is, most of my customizations to the bootstrap theme for now. &lt;/p&gt;</summary></entry><entry><title>Setting up Pelican</title><link href="/setting-up-pelican.html" rel="alternate"></link><updated>2015-10-12T00:00:00+02:00</updated><author><name>habeebq</name></author><id>tag:,2015-10-12:setting-up-pelican.html</id><summary type="html">&lt;p&gt;I used to blog (when I could!) on Wordpress. Wordpress is great and throws in a huge amount of functionality for free, and also has a huge amount of support.
However, blogging on wordpress.com was a bit limited as I could not (understandably) use any plugins and themes. Also, wordpress was a bit of overkill and also written in PHP which isnt something I am familiar with.
So in order to go deeper, I saw a couple of blogs I liked which had a clean and minimal interface and were generated in Jekyll. So started my journey...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; looked great, it had a load of themes, well supported and good traction. So I installed it, however, the installation wasnt as smooth as I had hoped it to be, partially due to my overzealous bypassing of most of the documentation. Also I had issues in installing ruby, once I got ruby I needed to install bundler, and I realized I need to update them all in different ways. I was unfamililar with ruby and I wondered if there is something similar available for &lt;code&gt;Python&lt;/code&gt;, and hence I found &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; seemed to be less mature than &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, and has less themes, it seemed much more bare, and I felt I could customize and hack it a bit more. There is also &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; which looks amazing too, but it seemed it requires a bit more support, however it had a similar structure to Jekyll so it must be a good framework too.&lt;/p&gt;
&lt;p&gt;Never having done web front end it was a bit of a curve for me (and still is) to figure out, but things like jinja, css, bootstrap werent too bad, but I've had to figure things out.&lt;/p&gt;
&lt;p&gt;Installing Pelican was easy and editing the pelicanconf.py to set things up was pretty smooth. What I needed to figure out was how to get both the blog on version control and the blog on github static pages at the same time in a single commit. I eventually settled on a structure where I generate the blog static files in a lower directory (habeebq.github.io) and save the blog content, templates and script in a directory called blog within that. This allows me to update the site in a single commit.&lt;/p&gt;
&lt;p&gt;Settling on a theme was tough, and I am still not sure. I got Flex working first (adblock was blocking out the font-awesome icons), but then i moved to pelican-bootstrap3. I modified it a bit, to add wells, and to fix markdown tables by enabling the plugin &lt;a href="https://github.com/ingwinlu/pelican-bootstrapify"&gt;bootstrapify&lt;/a&gt;. There is a huge list of &lt;a href="https://github.com/getpelican/pelican-themes"&gt;themes here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am also coming to grips with markdown, I hope to be able to comment all my code in markdown and generate a readable beautified document from it.&lt;/p&gt;
&lt;p&gt;I also had to figure out that to get syntax highlighting to work, the code block needs to be indented atleast once.&lt;/p&gt;
&lt;p&gt;Now that I type this, it seems I havent done much, but im sure it took my a bit of effort to get my flow running, but i think im almost there. Just need to import my existing blog in here and see how it goes.&lt;/p&gt;
&lt;p&gt;As an example here is my current &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u'habeebq'&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u'BITSMASHING'&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
&lt;span class="n"&gt;SITEDESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Randomizing the unknown...'&lt;/span&gt;

&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'content'&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Europe/Paris'&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u'en'&lt;/span&gt;

&lt;span class="c"&gt;# Feed generation is usually not desired when developing&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c"&gt;# Blogroll&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;'Pelican'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'http://getpelican.com/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Python.org'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'http://python.org/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Jinja2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'http://jinja.pocoo.org'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# Social widget&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;'linkedin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'google-plus'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'codehilite(css_class=highlight)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'extra'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;LOAD_CONTENT_CACHE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;MAIN_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;MENUITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;'projects'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'/projects.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'code-fork'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'whoami'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'/about.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/home/habeeb/workspace/habeebq.github.io/blog/pelican-bootstrap3'&lt;/span&gt;
&lt;span class="n"&gt;BOOTSTRAP_THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'readable'&lt;/span&gt;
&lt;span class="n"&gt;PYGMENTS_STYLE&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'monokai'&lt;/span&gt;

&lt;span class="c"&gt;#Navbar&lt;/span&gt;
&lt;span class="n"&gt;DISPLAY_CATEGORIES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="c"&gt;#SIDEBAR&lt;/span&gt;
&lt;span class="n"&gt;HIDE_SIDEBAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c"&gt;# Article Header&lt;/span&gt;
&lt;span class="n"&gt;SHOW_ARTICLE_AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;SHOW_ARTICLE_CATEGORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;SHOW_DATE_MODIFIED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c"&gt;# Fixing the tables formatting&lt;/span&gt;
&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'/home/habeeb/workspace/pelican_plugins/pelican-bootstrapify'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bootstrapify'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# Bootstrap extra css&lt;/span&gt;
&lt;span class="n"&gt;CUSTOM_CSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'theme/css/custom.css'&lt;/span&gt;
&lt;span class="n"&gt;GOOGLEFONT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://fonts.googleapis.com/css?family=Source+Sans+Pro'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry></feed>